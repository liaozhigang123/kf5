IO流

1、IO流，什么是IO？
    I：Input
    O：Output
    通过IO可以完成硬盘的文件的读和写。

2、IO流的分类：
    有多种分类方式：

    一种方式是按照流的方向进行分类：
        以内存作为参照物，
            往内存中去，叫做输入（Input）。或者叫做读（Read）。
            从内存中出来，叫做输出（Output）。或者叫做写（Write）。

    另一种方式是按照读取数据方式不同进行分类：
        有的流是按照字节的方式读取数据，一次读取1个字节byte，等同于一次读取8个二进制位。
            这种流是万能的，什么类型的文件都可以读取。
            包括：文本文件，图片，声音文件，视频文件等......

            假设文件file1.txt，采用字节流的话是这样读的：
                a中国bc张三fe
                第一次读：一个字节，正好读到'a'
                第二次读：一个字节，正好读好'中'字符的一半。
                第二次读：一个字节，正好读到'中字符的另一半'。


        有的流是按照字符的方式读取数据的，一次读取一个字符，
            这种流是为了方便读取普通文本文件而存在的，
            这种流不能读取：图片、声音、视频等文件。
            只能读取纯文本文件，连word文件都无法读取。

            假设文件file1.txt，采用字符流的话是这样读的：
                a中国bc张三fe
                第一次读：'a'字符（'a'字符在windows系统中占用1个字节。）
                第二次读：'中'字符（'中'字符在windows系统中占用2个字节。）

    综上所述：流的分类
        输入流、输出流
        字节流、字符流

3、java中所有的流都在：java.io.*;下。

4、java IO流这块有四大家族：
    四大家族的首领：
    java.io.InputStream     字节输入流
    java.io.OutputStream    字节输出流

    java.io.Reader      字符输入流
    java.io.Writer      字符输出流

    四大家族的首领都是抽象类。（abstract class）

    所有的流都实现了：java.io.Closeable接口，都是可关闭的，都有close()方法。
        流毕竟是一个管道，这个是内存和硬盘之间的通道，用完之后一定要关闭，
        不然会耗费（占用）很多资源。养成好习惯，用完流一定要关闭。

     所有的输出流都实现了：java.io.Flushable接口，都是可刷新的，都有flush()方法。
        养成一个好习惯，输出流在最终输出之后，一定要记得flush()刷新一下。
        这个刷新表示将通道/管道当中剩余未输出的数据强行输出完（清空管道！）
        刷新的作用就是清空管道。
        注意：如果，没有flush()可能会导致丢失数据。

    注意：在java中只要“类名”以Stream结尾的都是字节流。以“Reader/Writer”结尾的都是字符流。


5、java.io包下需要掌握的流有16个：

    文件专属：
        java.io.FileInputStream
        java.io.FileOutputStream
        java.io.FileReader
        java.io.FileWriter

    转换流：（将字节流转换字符流）
        java.io.InputStreamReader
        java.io.OutputStreamWriter

    缓冲流专属：
        java.io.BufferedReader
        java.io.BufferedWriter
        java.io.BufferedInputStream
        java.io.BufferedOutputStream

    数据流专属：
        java.io.DataInputStream
        java.io.DataOutputStream

    标准输出流：
        java.io.PrintWriter
        java.io.PrintStream

    对象专属流：
        java.io.ObjectInputStream
        java.io.ObjectOutputStream


6、java.io.FileInputStream：
    a、文件字节输入流，万能流，任何类型的文件都可以采用这个流来读。

    b、字节的方式，完成输入的操作，完成读的操作（硬盘---> 内存）

7、FileOutputStream
    a、文件字节输出流，负责写。
    b、从内存到硬盘。

8、使用FileInputStream + FileOutputStream完成文件的拷贝。
    a、拷贝的过程应该是一边读，一边写。
    b、使用以上的字节流拷贝文件的时候，文件类型随意，万能的。什么样的文件都能拷贝。

9、FileReader
    a、文件字符输入流，只能读取普通文件。
    b、读取文本内容时，比较方便，快捷。
    c、使用数组是char[]，因为是字符。

10、FileWriter
    a、文件字符输出流。写。
    b、只能输出普通文本。
    c、使用数组也是char[]，因为是字符。
    d、write("\n");  // 输出一个换行。

11、使用FileReader FileWriter进行拷贝的话，只能拷贝“普通文本”文件。

12、BufferedReader
    带有缓冲区的字符输入流。
    使用这个流的时候不需要自定义char数组，或者不需要自定义byte数组。自带缓冲。

13、BufferedWriter
    带有缓冲的字符输出流。

14、java.io.DataOutputStream：数据专属流。
    这个流可以将数据连同数据的类型一并写入文件。
    注意：这个文件不是普通文本文档。（这个文件使用记事本打不开。）

15、DataInputStream：数据字节输入流。
    DataOutputStream写的文件，只能使用DataInputStream去读。
    并且读的时候你需要提前知道写入的顺序。
    读的顺序需要和写的顺序一致。才可以正常取出数据。

16、java.io.PrintStream：标准输出流。默认输出到控制台。

17、File
    a、File类和四大家族没有关系，所以File类不能完成文件的读和写。

    b、File对象代表什么？
        文件和目录路径的抽象表示形式。
        C:\Aaa 这是一个File对象。
        C:\Aaa\Readme.txt 也是File对象。
        一个File对象有可能对应的是目录，也可能是文件。
        File只是一个路径名的抽象表示形式。

    c、需要掌握File类中常用的方法

18、序列化和反序列化
    a、一次序列化可以选择多个对象
        可以将对象放到集合当中，序列化集合。

        参与序列化的集合也需要实现java.io.Serializable接口。（一些集合源码中有实现）

    b、transient关键字表示游离的，不参与序列化。

19、IO + Properties联合使用。
    IO流：文件的读和写。
    Properties：是一个Map集合，key和value都是String类型。

    非常好的一个设计理念：
        以后经常改变的数据。可以单独写到一个文件中，使用程序动态读取。
        将来只需要修改这个文件的内容，java代码不需要改动，不需要重新
        编译，服务器也不需要重启。就可以拿到动态的信息。

    配置文件中的内容格式是：
        key1=value
        key2=value
    的时候，我们把这种配置文件叫做属性配置文件。

    java规范中有需求：属性配置文件建议.properties结尾，但这不是必须的。
    这种以.properties结尾的文件在java中被称为：属性配置文件。
    其中Properties是专门存放属性配置文件内容的一个类。

    在属性配置文件中井号#是注释
    格式：key=value








































