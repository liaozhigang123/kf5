TreeSet集合和TreeMap集合

1、TreeSet集合底层实际上是一个TreeMap

2、TreeMap集合底层是一个二叉树。

3、放到TreeSet集合中的元素，等同于放到TreeMap集合的key部分了。

4、TreeSet集合中的元素：无序不可重复，但是可以按照元素大小顺序自动排序。
    称为：可排序集合。

5、对于自定义类型Person{int age}类，TreeSet可以排序吗？
    无法排序。因为没有指定Person对象之间的比较规则。
    谁大谁小并没有说明。

    Person p1 = new Person(100);
    Person p2 = new Person(200);

    // 创建TreeSet集合
    TreeSet<Person> persons = new TreeSet<>();
    // 添加元素
    persons.add(p1);
    persons.add(p2);

    // 遍历
    for(Person p : persons){
        System.out.println(p);
    }

    比较时出现java.lang.ClassCastException异常
    出现这个异常的原因是：
        Person类没有实现java.lang.Comparable接口。

    需要比较的话，实现接口，重写compareTo方法，重写排序规则，按照什么进行比较，String类和Integer类已经重写了compareTo方法。
    compareTo方法返回值很重要：
        返回0表示相同，value会覆盖。
        返回>0，会继续在右子树上找。（10-9=1，1>0的说明左边这个数字比较大。所以在右子树上找。）
        返回<0，会继续在左子树上找。

6、TreeSet集合中元素排序的第二种方式：使用比较器的方式。
    比较器实现java.util.Comparator接口。（Comparable是java.lang包下的。Comparator是java.util包下的。）

7、最终的结论：
    放到TreeSet或者TreeMap集合key部分的元素要想做到排序，包括两种方式：
        第一种：放在集合中的元素实现java.lang.Comparable接口。
        第二种：在构造TreeSet或者TreeMap集合的时候给他传一个比较器对象。

8、Comparable和Comparator怎么选择呢？
    当比较规则不会发生改变的时候，或者说当比较规则只有1个的时候，建议实现Comparable接口。
    如果比较规则有多个，并且需要多个比较规则之间频繁切换，建议使用Comparator接口。









