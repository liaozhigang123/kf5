抽象类和接口

A、抽象类

1、什么是抽象类？
    类和类之间具有共同特征，将这些共同特征提取出来，形成的就是抽象类。
    类本身是不存在的，所以抽象类无法创建对象《无法实现化》。

2、抽象类属于什么类型？
    抽象类也属于引用数据类型。

3、抽象类怎么定义？
    语法：
        [修饰符列表] abstract class 类名{
            类体;
        }

4、抽象类是无法实例化的，无法创建对象的，所以抽象类是用来被子类继承的。

5、final和abstract不能联合使用，这两个关键字是对立的。

6、抽象类的子类可以是抽象类。

7、抽象类虽然无法实例化，但是抽象类有构造方法，这个构造方法是供予子类使用的。

8、抽象类关联到一个概念：抽象方法。
    什么是抽象方法？
        抽象方法表示没有实现的方法，没有方法体的方法。
        例如：public abstract void doSome();
        抽象方法特点是：
            特点1；没有方法体，以分号结尾。
            特点2：前面修饰符列表有abstract关键字。

9、抽象类
    a、抽象类中不一定有抽象方法，抽象方法必须出现在抽象类中。
    b、重要结论：
        一个非抽象的类继承抽象类，必须将抽象类中的抽象方法实现了。
        这是java语法上强行规定的，必须的，不然编译器就报错了。

        这里的覆盖/重写，也可以叫做实现。（对抽象的实现）

10、抽象类总结：
    第一：抽象类怎么定义？在class前添加abstract关键字就行了。
    第二：抽象类无法实例化的，无法创建对象的，所以抽象类是用来被子类继承的。
    第三：final和abstract不能联合使用，这两个关键字是对立的。
    第四：抽象类的子类可以是抽象类。也可以是非抽象类。
    第五：抽象类虽然无法实例化，但是抽象类有构造方法，这个构造方法是供予子类使用的。
    第六：抽象类中不一定有抽象方法，但是抽象方法必须在抽象类中。
    第七：抽象方法怎么定义？    public abstract void doSome();
    第八：一个非抽象的类，继承抽象类，必须将抽象类中的抽象方法进行覆盖/重写/实现。（重点）

    多态（当对多态不是很理解的时候，以后写代码能用多态就用多态。慢慢就理解了。）

11、面试题（判断题）：java语言中凡是没有方法体的方法都是抽象方法。
    不对，错误的。
    Object类中就有很多方法都没有方法体，都是以";"结尾的，但他们都不是抽象方法，
    例如：public native int hashCode();
    这个方法底层调用了C++写的动态链接库程序。
    前面修饰符列表中没有：abstract。有一个native。表示调用JVM本地程序。



B、接口

接口的基础语法：

1、接口也一种引用数据类型。编译之后也是一个class字节码文件。

2、接口是完全抽象的。（抽象类是半抽象。）或者也可以说接口是特殊的抽象类。

3、接口怎么定义，语法是什么？
    [修饰符列表] interface 接口名{}

4、接口支持多继承，一个接口可以继承多个接口。

5、接口中只包含两部分内容，一部分是：常量，一部分是：抽象方法。

6、接口中所有的元素都是public修饰的，（都是公开的）

7、接口中抽象方法定义时：public abstract修饰符可以省略。

8、接口中的方法都是抽象方法，所以接口中的方法不能有方法体。

9、接口中的常量的public static final可以省略。（常量：值不能发生改变的变量）



接口的基础语法
    a、类和类之间叫做继承，类和接口之间叫做实现。
        别多想：你仍然可以将"实现"看做"继承"。
        继承使用extends关键字完成。
        实现使用implements关键字完成。

    b、当一个非抽象的类实现接口的话，必须将接口中所有的抽象方法全部实现（覆盖、重写）。

    c、一个类可以同时实现多个接口
        这种机制弥补了java中的哪个缺陷？
            java中类和类只支持单继承。实际上单继承是为了简单而出现的，
            现实世界中存在多继承，java中的接口弥补了单继承带来的缺陷。

            下面例子实现多个接口，其实就类似于多继承。

        interface A{
            void m1();
        }

        interface B{
            void m2();
        }

        interface C{
            void m3();
        }

        // 实现多个接口，其实就类似于多继承。
        class D implements A,B,C{
            public void m1(){}
            public void m2(){}
            public void m3(){}
        }

    d、接口A和接口B虽然没有继承关系，但是写代码的时候，可以互转。
        编译器没意见，但是运行时可能出现：ClassCastException异常

    之前有一个结论:
        无论向上转型还是向下转型，两种类型之间必须要有继承关系，
        没有继承关系编译器会报错。（这句话不适用在接口方面）
        最终实际和之前还是一样，需要加：instanceof运算符进行判断。
        向下转型养成好习惯。转型之前先if+instanceof进行判断。

    e、继承和实现都存在的话，代码应该怎么写？
        extends 关键字在前。
        implements 关键字在后。

    public class Test{
        public static void main(String[] args){
            // 创建对象（表面看Animal类没起作用！）
            Flyable f = new Cat();  //多态。
            f.fly();    // Cat的重写方法。
        }
    }

    // 动物类：父类
    class Animal{
    }

    // 可飞翔的接口（是一对翅膀）
    // 接口通常提取的是行为动作。
    interface Flyable{
        void fly();
    }

    // 动物类子类：猫类
    // Flyable是一个接口，是一对翅膀的接口，通过接口插到猫身上，让猫变的可以飞翔。
    class Cat extends Animal implements Flyable{
        public void fly(){

        }
    }

接口的基础语法总结：
    1、接口是一种“引用数据类型”。
    2、接口是完全抽象的。
    3、接口怎么定义：[修饰符列表] interface 接口名{}
    4、接口支持多继承。
    5、接口中只有常量+抽象方法。
    6、接口中所有的元素都是public修饰的。
    7、接口中抽象方法的public abstract可以省略。
    8、接口常量的public static final可以省略。
    9、接口中方法不能有方法体。
    10、一个非抽象的类，实现接口的时候，必须将接口中所有方法加以实现。
    11、一个类可以实现多个接口。
    12、extends和implements可以共存，extends在前，implements在后。
    13、使用接口，写代码的时候，可以使用多态（父类型引用指向子类型对象）。



C、接口在开发中的作用
    注意：接口在开发中的作用，类似于多态在开发中的作用。
    多态：面向抽象编程，不要面向具体编程。降低程序的耦合度。提高程序的扩展力。

    接口在开发的作用？
        接口是完全的抽象的。
        而我们以后正好要求，面向抽象编程。
        面向抽象编程这句话以后可以修改为：面向接口编程。
        有了接口就有了可插拔。可插拔表示扩展力很强。不是焊接死的。

        主板和内存条之间有插槽，这个插槽就是接口，内存条坏了，可以重新
        买一个换下来。这个叫做高扩展性。（低耦合度。）

    总结一句话：三个字"解耦合"
        面向接口编程，可以降低程序的耦合度，提高程序的扩展力。符合OCP开发原则。
        接口的使用离不开多态机制。（接口+多态才可以达到降低耦合度。）

        接口可以解耦合，解开的是谁和谁的耦合！
        任何一个接口都有调用者和实现者。
        接口可以将调用者和实现者解耦合。
        调用者面向接口调用。
        实现者面向接口编写实现。

        以后进行大项目的开发，一般都是将项目分离成一个模块一个模块的，
        模块和模块之间采用接口衔接。降低耦合度。

    类型和类型之间的关系：
    is a (继承)、 has a (关联)、 like a (实现)

    is a：
        Cat is a Animal (猫是一个动物)
        凡是能够满足is a的表示"继承关系"
        A extends B

    has a：
        I has a Pen (我有一支笔)
        凡是能够满足is a 的关系的表示"关联关系"
        关联关系通常以"属性"的形式存在。
        A{
            B b;
        }

    like a:
        Cooker like a FoodMenu (厨师像一个菜单一样)
        凡是能够满足like a 关系的表示"实现关系"
        实现关系通常是：类实现接口。
        A implements B




D、抽象类和接口有什么区别？
    在这里我们只说一下抽象类和接口在语法上的区别。
    至于以后抽象类和接口应该怎么进行选择，通过后面的项目去体会/学习。

    抽象类是半抽象的。
    接口是完全抽象的。

    抽象类中有构造方法。
    接口中没有构造方法。

    接口和接口之间支持多继承。
    类和类之间只能单继承。

    一个类可以同时实现多个接口。
    一个抽象类只能继承一个类（单继承）。

    接口中只允许出现常量和抽象方法。

    这里先透露一个信息：
        以后接口使用的比抽象类多。一般抽象类使用的还是比较少。
        接口一般都是对"行为"的抽象。





