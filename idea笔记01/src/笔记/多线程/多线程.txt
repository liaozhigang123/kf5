多线程

1、什么是进程？什么是线程？
    进程是一个应用程序（一个进程是一个软件）。
    线程是一个进程中执行场景/执行单元。
    一个进程可以启动多个线程。

2、进程和线程是什么关系？
    进程可以看做是现实生活当中的公司。
    线程可以看做是公司当中的某个员工。

    注意：
        进程A和进程B的内存独立不共享。
        线程A和线程B呢？
            在java语言中：
                线程A和线程B，堆内存和方法区内存共享。
                但是栈内存独立，一个线程一个栈。
            假设启动10个线程，会有10个栈空间，每个栈和每个栈之间，
            互不干扰，各自执行各自的，这就是多线程并发。

3、思考一个问题：
    使用了多线程机制之后，main方法结束，是不是有可能程序也不会结束。
    main方法结束只是主线程结束了，主栈空了，其他的栈（线程）可能还在
    压栈弹栈。

4、java语言中，实现线程有两种方式，那两种方式呢？

    第一种方式：编写一个类，直接继承java.lang.Thread，重写run方法。
    // 定义线程类
    public class MyThread extends Thread{
        public void run(){

        }
        // 创建线程对象
        MyThread t = new MyThread();
        // 启动线程
        t.start();
    }

    第二种方式：编写一个类，实现java.lang.Runnable接口，实现run方法。
        // 定义一个可运行的类
        public class MyRunnable implements Runnable{
            public void run(){

            }
        }
        // 创建线程对象
        Thread t = new Thread(new MyRunnable());
        // 启动线程
        t.start();

    注意：第二种方式实现接口比较常用，因为一个类实现了接口，它还可以去继承其他的类，更灵活。

4、关于线程的sleep方法：
    static void sleep(long millis)
    a、静态方法
    b、参数是毫秒
    c、作用：让当前线程进入休眠，进入“阻塞状态”，放弃占有CPU时间片，让给其他线程使用。
        这行代码出现在A线程中，A线程就会休眠。
        这行代码出现在B线程中，B线程就会休眠。
    d、Thread.sleep()方法，可以做到这种效果：
        间隔特定的时间，去执行一段特定代码，每隔多久执行一次。

5、重点：run()当中的异常不能throws，只能try catch
    因为run()方法在父类中没有抛出任何异常，子类不能比父类抛出更多的异常。

6、sleep睡眠太久了，如果希望半道上醒来，也就是怎么叫醒一个正在睡眠的线程？
    注意：这个不是终断线程的执行，是终断线程的睡眠。
    // 终断t线程的睡眠（这种终断睡眠的方式依靠了java的异常处理机制。）
    t.interrupt();  // 干扰，一盆冷水过去！

7、在java中怎么强行终止一个线程的执行。
    t.stop();   // 已过时（不建议使用。）
    这种方式存在很大的缺点：容易丢失数据。因为这种方式是直接将线程杀死了。
    线程没有保存数据将会丢失。不建议使用。（类似win系统中的任务管理器，结束任务/结束进程）

    怎么合理的终止一个线程的执行。这种方式是很常用的。

    // 打一个布尔标记
    boolean run = true;

    false ---> return;
    if(run){

    }else{
        // return就结束了，你在结束之前还有什么没有保存的。
        // 在这里可以保存。
        return;
    }

    // 终止线程
    // 你想要什么时候终止t的执行，那么你把标记修改为false，就结束了。
    r.run = false;



8、（了解）关于线程的调度
    a、常见的线程调度模型有哪些？

        抢占式调度模型：
            那个线程的优先级比较高，抢到的CPU时间片的概率就高一些/多一些。
            java采用的就是抢占式调度模型。

        均分式调度模型：
            平均分配CPU时间片，每个线程占有的CPU时间片长度一样。
            平均分配，一切平等。
            有一些编程语言，线程调度模型采用的是这种方式。

9、java中提供了哪些方法是线程调度有关系呢？

    实例方法：
        void setPriority(int newPriority) 设置线程的优先级
        int getPriority() 获取线程优先级
        最低优先级1
        默认优先级5
        最高优先级10
        优先级比较高的获取CPU时间片可能会多一些。（但也不完全是，大概率是多的。）

    静态方法：
        static void yield() 让位方法
        暂停当前正在执行的线程对象，并执行其他线程
        yield() 方法不是阻塞方法。让当前线程让位，让给其他线程使用。
        yield() 方法的执行会让当前线程从“运行状态”回到“就绪状态”。
        注意：在回到就绪之后，有可能还会再次抢到。

    实例方法：
        void join()
        合并线程

        class MyThread extends Thread{
            public void doSome(){
                MyThread2 t = new MyThread2();
                t.join();   // 当前线程进入阻塞，t线程执行，直到t线程结束。当前线程才可以继续。
            }
        }

        class MyThread2 extends Thread{

        }



10、关于多线程并发环境下，数据的安全问题。

    a、为什么这个是重点？
        以后在开发中，我们的项目都是运行在服务器当中，
        而服务器已将线程的定义，线程对象的创建，线程
        的启动等，都已经实现完了。这些代码我们都不需要
        编写。

        最重要的是：你要知道，你编写的程序需要放到一个
        多线程的环境下运行，你更需要关注的是这些数据
        在多线程并发的环境下是否是安全的。（重点）

    b、什么时候数据在多线程并发的环境下会存在安全问题呢？
        三个条件：
            条件1：多线程并发。
            条件2：有共享数据。
            条件3：共享数据有修改的行为。
        满足以上3个条件之后，就会存在线程安全问题。

11、怎么解决线程安全问题呢？
    当多线程并发的环境下，有共享数据，并且这个数据还会被修改，此时就存在
    线程安全问题，怎么解决这个问题？
        线程排队执行。（不能并发）。
        用排队执行解决线程安全问题。
        这种机制被称为：线程同步机制。

        专业术语叫做：线程同步，实际上就是线程不能同步并发了，线程必须排队执行。

    怎么解决线程安全问题？
        使用“线程同步机制”。

    线程同步就是线程排队了，线程排队就会牺牲了一部分效率，没办法，数据安全
    第一位，只有数据安全了，我们才可以谈效率。数据不安全，没有效率的事了。

12、线程同步这块，涉及到这两个专业术语：

    异步编程模型：
        线程t1和线程t2，各自执行各自的，t1不管t2，t2不管t1，
        谁也不需要等谁，这种编程模型叫做：异步编程模型。
        其实就是：多线程并发（效率较高。）

        异步就是并发。

    同步编程模型：
        线程t1和线程t2，在线程t1执行的时候，必须等待t2线程执行
        结束，或者说在t2线程执行的时候，必须等待t1线程执行结束，
        两个线程之间发生了等待关系，这就是同步编程模型。
        效率较低。线程排队执行。

        同步就是排队。

13、线程同步机制的语法是：
    synchronized(){
        // 线程同步代码块。
    }
    synchronized后面小括号中传的这个“数据”是相当关键的。
    这个数据必须是多线程共享的数据。才能达到多线程排队。

    ()中写什么？
        那要看你想让哪些线程同步。
        假设t1、t2、t3、t4、t5、有5个线程，
        你只希望t1 t2 t3排队，t4 t5不需要排队。怎么办？
        你一定要在()中写一个t1 t2 t3共享的对象。而这个
        对象对于t4 t5 来说不是共享的。

        这里需要注意的是：这个共享对象一定要选好，这个共享对象一定是你需要排队
        执行的这些线程对象所共享的。

    在java语言中，任何一个对象都有“一把锁”，其实这把锁就是标记。（只是把它叫做锁。）
    100个对象，100把锁。一个对象1把锁。



14、java中三大变量？   【重要的内容】

    实例变量：在堆中。

    静态变量：在方法区。

    局部变量：在栈中。

    以上三大变量中：
        局部变量永远都不会存在线程安全问题。
        因为局部变量不共享。（一个线程一个栈。）
        局部变量在栈中。所以局部变量永远都不会共享。

        实例变量在堆中，堆只有1个。
        静态变量在方法区中，方法区只有1个。
        堆和方法区都是多线程共享的，所以可能存在线程安全问题。

        局部变量+常量：不会有线程安全问题。
        成员变量：可能会有线程安全问题。（成员变量：实例变量+静态变量）

        存在线程安全问题：就是存在有问题的。指线程安全问题，共享资源存在问题，不共享就不存在占有资源，没有线程安全问题。



15、在实例方法上使用synchronized吗？可以的。
    synchronized出现在实例方法上，一定锁的是this。
    没得挑。只能是this。不能是其他的对象了。
    所以这种方式不灵活。

    另外还有一个缺点：synchronized出现在实例方法上，
    表示整个方法都需要同步，可能会无故扩大同步的范围，
    导致程序的执行效率降低。
    所以这种方式不常用。

    synchronized使用在实例方法上有什么优点？
        代码写少了。节俭了。

    如果共享的对象就是this，并且需要同步的代码是整个方法体，
    建议使用这种方式。
    public synchronized void m(){}



16、如果使用局部变量的话：
    建议使用：StringBuilder。
    因为局部变量不存在线程安全问题。选择StringBuilder。
    StringBuffer效率比较低。

    ArrayList是非线程安全的。
    Vector是线程安全的。
    HashMap HashSet是非线程安全的。
    Hashtable是线程安全的。



17、synchronized总结：
    synchronized有三种写法：

    第一种：同步代码块
        灵活
        synchronized(线程共享对象){
            同步代码块;
        }

    第二种：在实例方法上使用synchronized
        表示共享对象一定是this
        并且同步代码块是整个方法体。
        public synchronized void m(){}

    第三种：在静态方法上使用synchronized
        表示找类锁。
        类锁永远只有1把。
        就算创建了100个对象，那类锁也只有一把。

    对象锁：1个对象1把锁，100个对象100把锁。
    类锁：100个对象，也可能只是1把类锁。


18、死锁
    synchronized在开发中最好不要嵌套使用，
    可能会导致锁现象的发生。

19、开发过程中怎么解决线程安全问题？

    是一上来就选择线程同步吗？synchronized
        不是，synchronized会让程序的执行效率降低，用户体验不好。
        系统的用户吞吐量降低。用户体验差。在不得已的情况下再选择
        线程同步机制。

    第一种方案：尽量使用局部变量代替“实例变量和静态变量”。

    第二种方案：如果必须是实例变量，那么可以考虑创建多个对象，这样
        实例变量的内存就不共享了。
        （一个线程对应一个对象，100个线程对应100对象，对象不共享，
        就没有数据安全问题了。）

    第三种方案：如果不能使用局部变量，对象也不能创建多个，这个时候
        就只能选择synchronized了。线程同步机制。



20、线程还有以下内容，列举一下
    a、守护线程
        java语言中线程分为两大类：
            一类是：用户线程
            一类是：守护线程（后台线程）
            其中具有代表性的就是：垃圾回收线程（守护线程）。

        守护线程的特点：
            一般守护线程是一个死循环，所有的用户线程只要结束，
            守护线程自动结束。

        注意：主线程main方法是一个用户线程。

        守护线程用在什么地方呢？
            例如：
            每天00:00的时候系统数据自动备份。
            这个需要使用到定时器，并且我们可以将定时器设置为守护线程。
            一直在哪里看着，每到00:00的时候就备份一次。所有的用户线程
            如果结束了，守护线程自动退出，没有必要进行数据备份了。



    b、定时器
        定时器的作用：
            间隔特定的时间，执行特定的程序。

            例如：
            每周要进行银行账户的总账操作。
            每天要进行数据的备份操作。

            在实际的开发中，每隔多久执行一段特定的程序，这种需求是很常见的，
            那么在java中其实可以采用多种方式实现：

                可以使用sleep方法，睡眠，设置睡眠时间，每到这个时间点醒来，执行
                任务。这种方式是最原始的定时器。（比较low）

                在java的类库中已经写好了一个定时器：java.util.Timer，可以直接拿来用。
                不过，这种方式在目前的开发中也很少用，因为现在有很多高级框架都是支持
                定时任务的。

                在实际的开发中，目前使用较多的是Spring框架中提供的SpringTask框架，
                这个框架只要进行简单的配置，就可以完成定时器的任务。




    c、实现线程的第三种方式：实现Callable接口。（JDK8新特性。）
        这种方式实现的线程可以获取线程的返回值。
        之前讲解的那两种方式是无法获取线程的返回值的，因为run方法返回void。

        思考：
            系统委派一个线程去执行一个任务，该线程执行完任务之后，可能
            会有一个执行结果，我们怎么拿到这个执行结果呢？
                使用三种方式：实现Callable接口方式。

    d、关于Object类中的wait和notify方法。（生产者和消费者模式！）

        第一：wait和notify方法不是线程对象的方法，是java中任何一个java对象
            都有的方法，因为这两个方法是Object类中自带的。

            wait方法和notify方法不是通过线程对象调用，
            不是这样的：t.wait(),也不是这样的：t.notify().. 不对，
            这两方法是通过java对象去调的。

        第二：wait()方法作用？
            Object o = new Object();
            o.wait();

            表示：
                让正在o对象上活动的线程进入等待状态，无期限等待，
                直到被唤醒为止。
                o.wait();方法的调用，会让“当前线程（正在o对象上活动的线程）”
                进入等待状态。

        第三：notify()方法作用？
            Object o = new Object();
            o.notify();

            表示：
                唤醒正在o对象上等待的线程。

            还有一个notifyAll()方法：
                这个方法是唤醒o对象处于等待的所有的线程。

































