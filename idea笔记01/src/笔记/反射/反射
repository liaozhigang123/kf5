反射
1.1、什么是反射机制？反射机制有什么用？

    反射机制：可以操作字节码文件，可以读和修改字节码文件，
             通过反射机制操作代码片段。（class文件）

    作用：可以让程序更加灵活。

1.2、反射机制相关的类在哪个包下？
    java.lang.reflect.*;

1.3、反射机制相关的主要的类？
    java.lang.Class;                //代表这个字节码，代表一个类型
    java.lang.reflect.Method;       //代表字节码中的方法字节码（重点）
    java.lang.reflect.Constructor;  //代表字节码中的构造方法字节码
    java.lang.reflect.Field;        //代表字节码中的属性字节码（重点）

1.4、在java中获取Class的三种方式？
        要操作一个类的字节码，需要首先获取到这个类的字节码，怎么获取java.lang.Class实例？

        三种方式

    第一种：Class c = Class.forName("完整类名");

        Class.forName()
            1、静态方法
            2、方法的参数是一个字符串
            3、字符串需要的是一个完整类名
            4、完整类名必须带有包名。java.lang包不能省略。

    第二种：Class c = 对象(引用).getClass();

        String s = "abc";
        Class x = s.getClass(); // x代表String.class字节码文件，x代表String类型。

        Date time = new Date();
        Class y = time.getClass();

    第三种：Class c = 任何类型.class;

        Class c = int.class;
        Class c = String.class;


===========================================================================
    Class c1 =  Class.forName("java.lang.String");
    String s = "abc";   Class c2 = s.getClass();
    System.out.println(c1 == c2); // true 指向同一个内存地址
===========================================================================
    1、Class c1 =  Class.forName("java.lang.String");

    2、String s = "abc";   Class c2 = s.getClass();

    3、Class c3 = String.class;

    c1 == c2 == c3 (true)

    Class.forName("java.lang.String") == String.class == s.getClass();


===========================================================================
1.5、获取了Class之后，可以调用无参数构造方法来实例化对象

    //c代表的就是日期Date类型
    Class c = Class.forName("java.util.Date");

    //实例化一个Date日期型的对象
    Object obj = c.newInstance();

1.6、如果你只想让一个类"静态代码块"执行的话，你可以怎么做？
    Class.forName("该类的类名");
    这样类就加载，类加载的时候，静态代码块执行！
    在这里，对该方法的返回值不感兴趣，主要是为了使用"类加载"这个动作。
