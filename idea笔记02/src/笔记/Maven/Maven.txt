Maven

1、Maven核心概念：用好Maven，了解这些概念
    (1)、POM
    (2)、约定的目录结构
    (3)、坐标
    (4)、依赖管理
    (5)、仓库管理
    (6)、生命周期
    (7)、插件和目标
    (8)、继承
    (9)、聚合

    (1)、POM：
        一个文件，名称是pom.xml，pom翻译过来叫做项目对象模型。
        maven把一个项目当做一个模型使用。控制Maven构建项目的过程，管理jar依赖。

        通常java程序，压缩文件是jar扩展名的。对于web应用，压缩文件扩展名是.war

    (2)、约定的目录结构：maven项目的目录和文件的位置都是规定的。

    (3)、坐标：是一个唯一的字符串，用来表示资源的。

    (4)、依赖管理：管理你的项目可以使用jar文件。

    (5)、仓库管理（了解）：你的资源存放的位置。

    (6)、生命周期（了解）：maven工具构建项目的过程，就是生命周期。

    (7)、插件和目标（了解）：执行maven构建的时候用的工具是插件
    (8)、继承
    (9)、聚合

    maven的使用，先难后易的。难是说使用maven的命令，完成maven使用，在idea中直接使用maven，代替命令。



2、疑问：mvn compile 编译src/main目录下的所有java文件的。
    (1)、为什么要下载
        maven工具执行的操作需要很多插件（java类--jar文件）完成的

    (2)、下载什么东西了
        jar文件--叫做插件--插件是完成某些功能

    (3)、下载的东西存放在哪里了。
        默认仓库（本机仓库）：
        C:\Users\（登录操作系统的用户名）Administrator\.m2\repository


3、仓库
    (1)、仓库是什么，就是仓库存放东西的，存放maven使用的jar和我们项目使用的jar
        maven使用的插件（各种jar）
        我项目使用的jar（第三方的工具）

    (2)、仓库的分类
        本地仓库：就是你的个人计算机上的文件夹，存放各种jar
        远程仓库：在互联网上的，使用网络才能使用的仓库
            <1>、中央仓库，最权威的，所有的开发人员都共享使用的一个集中的仓库，
                https://repo.maven.apache.org   ：中央仓库的地址

            <2>、中央仓库的镜像：就是中央仓库的备份，在各大洲，重要的城市都是镜像。

            <3>、私服，在公司内部，在局域网中使用的，不是对外使用的。

    (3)、仓库的使用，maven仓库的使用不需要人为参与。
        开发人员需要使用mysql驱动--->maven首先查本地仓库--->私服--->镜像--->中央仓库


4、pom：Project Object Model项目对象模型，是一个pom.xml文件。
    (1)、坐标：唯一值，在互联网中唯一标识一个项目的
        <groupId>公司域名的倒写</groupId>
        <artifactId>自定义项目名称</artifactId>
        <version>自定版本号</version>

        https://mvnrepository.com/ 搜索使用的中央仓库，使用groupId 或者 artifactId作为搜索条件

    (2)、packaging：打包后压缩文件的扩展名，默认是jar，web应用是war
         packaging 可以不写，默认是jar

    (3)、依赖
        dependencies 和 dependency,相当于是java代码中import
        你的项目中要使用的各种资源说明，比如我的项目要使用mysql驱动

        <dependencies>
            <!-- 依赖 java代码中 import -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.9</version>
            </dependency>
        </dependencies>

    (4)、properties：设置属性

    (5)、build：maven在进行项目的构建时，配置信息，例如指定编译java代码使用的jdk版本等等
        

5、maven生命周期，maven的命令，maven的插件
    maven的生命周期：就是maven构建项目的过程，清理，编译，测试，报告，打包，安装，部署。

    maven的命令：maven独立使用，通过命令，完成maven的生命周期的执行。
                maven可以使用命令，完成项目的清理，编译，测试等等。

    maven的插件：maven命令执行时，真正完成功能的是插件，插件就是一些jar文件，一些类。

    (1)、单元测试（测试方法）：用的是junit，junit是一个专门测试的框架（工具）。
        junit测试的内容：测试的是类中的方法，每一个方法都是独立测试的。
                        方法是测试的基本单位（单元）。

        maven借助单元测试，批量的测试你类中大量方法是否符合预期的。

    (2)、使用步骤
        <1>、加入依赖，在pom.xml加入单元测试依赖

        <2>、在maven项目中src/test/java目录下，创建测试程序。
            推荐的创建类和方法的提示：
                测试类的名称 是Test + 你要测试的类名
                测试的方法名称 是：Test + 方法名称

                例如你要测试HelloMaven,
                创建测试类 TestHelloMaven

                @Test
                public void testAdd(){
                    测试HelloMaven的add方法是否正确
                }

                其中testAdd叫做测试方法，它的定义规则
                    方法是public的，必须的
                    方法没有返回值，必须的
                    方法名称是自定义的，推荐是Test + 方法名称
                    在方法的上面加入 @Test

                mvn compile
                编译main/java目录下的java 为class文件，同时把class拷贝到 target/classes目录下面
                把main/resources目录下的所有文件，都拷贝到target/classes目录下



6、在idea中设置maven，让idea和maven结合使用。
    idea中内置了maven，一般不使用内置的，因为用内置修改maven的设置不方便。
    使用自己安装的maven，需要覆盖idea中的默认设置。让idea指定maven安装位置等信息

    配置的入口
        <1>、配置当前工程的设置，file---setting---Build,Excution,Deployment---Build Tools
            ---Maven
                Maven Home directory：Maven的安装目录
                User Settings File：就是Maven安装目录conf/setting.xml配置文件
                Local Repository：本机仓库的目录位置

            ---Build Tools---Maven---Runner
                VM Options：-DarchetypeCatalog=internal
                RE：你项目的jdk

                -DarchetypeCatalog-internal，maven项目创建时，会联网下载模板文件，
                比较大，使用-DarchetypeCatalog-internal，不用下载，创建maven项目速度快

        <2>、配置以后新建工程的设置，file---other setting---Settings for New Project


7、使用模板创建项目
    (1)、maven-archetype-quickstart：普通的java项目
    (2)、maven-archetype-webapp：web工程



8、依赖范围，使用scope表示的。
    scope的值有 compile,test,provided, 默认是compile
    scope：表示依赖使用的范围，也就是在maven构建项目的那些阶段中起作用。
        maven构建项目 编译，测试，打包，安装，部署 过程（阶段）

    junit的依赖范围是 test
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.11</version>
        <scope>test</scope>
    </dependency>

    依赖的范围：compile，test，provided，默认采用compile
    -----------------------------------------------------------------------------
                        compile             test                provided
    -----------------------------------------------------------------------------
    对主程序是否有效        是                 否                     是
    -----------------------------------------------------------------------------
    对测试程序是否有效      是                 是                     是
    -----------------------------------------------------------------------------
    是否参与打包            是                 否                     否
    -----------------------------------------------------------------------------
    是否参与部署            是                 否                     否
    -----------------------------------------------------------------------------


9、maven常用操作
    (1)、maven的属性设置
        <properties> 设置maven的常用设置

    (2)、maven的全局变量
        自定义的属性，<1>、在<properties> 通过自定义标签声明变量（标签名就是变量名）
                     <2>、在pom.xml文件中的其他位置，使用${标签名} 使用变量的值

        自定义全局变量一般是定义 依赖的版本号，当你的项目中要使用多个相同的版本号，
        先使用全局变量定义，在使用${变量名}

    (3)、资源插件
        <1>、默认没有使用resources的时候，maven执行编译代码时，会把src/main/resources目录中的文件拷贝到target/classes目录中。
            对于src/main/java目录下的非java文件不处理，不拷贝到target/classes目录中。

        <2>、我们的程序有需要把一些文件放在 src/main/java目录中，当我在执行java程序时，
            需要用到src/main/java目录中的文件。
            需要告诉maven在 mvn compile src/main/java目录下的程序时，
            需要把文件一同拷贝到target/classes目录中。
            此时就需要在<build>中加入<resources>。





















