spring框架

spring全家桶：spring， springmvc，spring boot， spring cloud

spring：出现是在2002左右，解决企业开发的难度。减轻对项目模块之间的管理，
        类和类之间的管理，帮助开发人员创建对象，管理对象之间的关系。
        spring核心技术 ioc ，aop 。能实现模块之间，类之间的解耦合。

    依赖：class a中使用class b的属性或者方法，叫做class a依赖class b

-----------------------------------------------------------------------------------

框架怎么学：框架是一个软件，其他人写好的软件。
    (1)、知道框架能做什么， 例如mybatis--访问数据库，对表中的数据执行增删改查。
    (2)、框架的语法，框架要完成一个功能，需要一定的步骤支持的。
    (3)、框架的内部实现，框架内部怎么做，原理是什么。
    (4)、通过学习，可以实现一个框架。

-----------------------------------------------------------------------------------

1、spring的第一个核心功能 ioc

    IoC (Inversion of Control) : 控制反转，是一个理论，概念，思想。
    描述的：把对象的创建，赋值，管理工作都交给代码之外的容器实现，
            也就是对象的创建是有其他外部资源完成。

    控制：创建对象，对象的属性赋值，对象之间的关系管理。
    反转：把原来的开发人员管理，创建对象的权限转移给代码之外的容器实现。
          由容器代替开发人员管理对象。创建对象，给属性赋值。

    正转：由开发人员在代码中，使用new 构造方法创建对象，开发人员主动管理对象。
          public static void main(String args[]){
            Student student = new Student(); // 在代码中，创建对象。--正转。
          }

    容器：是一个服务器软件，一个框架（spring）

    为什么要使用ioc：目的就是减少对代码的改动，也能实现不同的功能。实现解耦合。

    java中创建对象有哪些方式：
        <1>、构造方法，new Student()
        <2>、反射
        <3>、序列化
        <4>、克隆
        <5>、ioc：容器创建对象
        <6>、动态代理

    ioc的体现：
        servlet <1>、创建类继承HTTPServlet
                <2>、在web.xml注册servlet，使用<servlet-name> myservlet </servlet-name>
                                              <servlet-class>com.ck.controller.Myservlet1</servlet-class>

                <3>、没有创建Servlet对象，没有MyServlet myservlet = new MyServlet()

                <4>、Servlet是Tomcat服务器它帮你创建的。Tomcat也称容器
                    Tomcat作为容器：里面存放的有Servlet对象，Listener，Filter对象


    IoC的技术实现：
        DI是ioc的技术实现。
        DI(Dependency Injection)：依赖注入，只需要在程序中提供要使用的对象名称就可以，至于对象任何在容器中创建，
                                  赋值，查找都由容器内部实现。

    spring是使用的di实现了ioc的功能，spring底层创建对象，使用的是反射机制。
    spring是一个容器，管理对象，给属性赋值，底层是反射创建对象。

    di：依赖注入，表示创建对象，给属性赋值。

    di的实现有两种：
        <1>、在spring的配置文件中，使用标签和属性完成，叫做基于XML的di实现
        <2>、使用spring中的注解，完成属性赋值，叫做基于注解的id实现

    di的语法分类：
        <1>、set注入（设置注入）：spring调用类的set方法，在set方法可以实现属性的赋值。
             80左右都是使用的set注入

        <2>、构造注入，spring调用类的有参构造方法，创建对象。在构造方法中完成赋值。


    spring-context 和 spring-webmvc是spring中的两个模块

    spring-context:是ioc功能的，创建对象的。
    spring-webmvc做的开发使用的，是servlet的升级。
    spring-webmvc中也会用到spring-context中创建对象的功能的。


2、基于注解的di：通过注解完成java对象创建，属性赋值。
    使用注解的步骤：
        <1>、加入maven的依赖 spring-context，在你加入spring-context的同时，间接加入spring-aop的依赖。
            使用注解必须使用spring-aop依赖

        <2>、在类中加入spring的注解（多个不同功能的注解）

        <3>、在spring的配置文件中，加入一个组件扫描器的标签，说明注解在你的项目中的位置

        学习的注解：
            <1>、@Component   [英文翻译 Component：组件]
            <2>、@Repository  [英文翻译 Repository：仓库]
            <3>、@Service     [英文翻译 Service：服务]
            <4>、@Controller  [英文翻译 Controller：控制器]
            <5>、@Value       [英文翻译 Value：值]
            <6>、@Autowired   [英文翻译 Autowired：自动装配]
            <7>、@Resource    [英文翻译 Resource：资源]

        声明组件扫描器（component-scan），组件就是java对象
        base-package：指定注解在你的项目中的包名。
        component-scan工作方式：spring会扫描遍历base-package指定的包，
        把包中和子包中所有的类，找到类中的注解，按照注解的功能创建对象，或给属性赋值。

----------------------------------------------------------------------------

        @Component(value = "myStudent")
        public class Student{}

        @Component：创建对象的，等同于<bean>的功能
            属性：value 就是对象的名称，也就是bean的id值，
                  value的值是唯一的，创建的对象在整个spring容器中就一个
            位置：在类的上面

        @Component(value = "myStudent")等同于
        <bean id="myStudent" class="com.ck.entity.Student" />

----------------------------------------------------------------------------

        spring中的@Component功能一致，创建对象的注解还有：
        <1>、@Repository（用在持久层类上面）：放在dao的实现类上面，
                表示创建dao对象，dao对象是能访问数据库的。

        <2>、@Service（用在业务层上面）：放在service的实现类上面，
                创建service对象，service对象是做业务处理，可以有事务等功能的。

        <3>、@Controller（用在控制器的上面）：放在控制器（处理器）类的上面，创建控制器对象的，
                控制器对象，能够接受用户提交的参数，显示请求的处理结果。

        以上三个注解的使用语法@Component一样的。都能创建对象，但是这个三个注解还有额外的功能。
        @Repository，@Service，@Controller是给项目的对象分层的。

----------------------------------------------------------------------------

        引用类型
        @Autowired：spring框架提供的注解，实现引用类型的数据赋值。
        spring中通过注解给引用类型赋值，使用的是自动注入原理，支持byName，byType
        @Autowired：默认使用的是byType自动注入。

            属性：required，是一个boolean类型的，默认true
                    required=true：表示引用类型赋值失败，程序报错，并终止执行。
                    required=false：引用类型如果赋值失败，程序正常执行，引用类型是null

            位置：<1>、在属性定义的上面，无需要set方法，推荐使用
                  <2>、在set方法的上面

            如果要使用byName方式，需要做的是：
            <1>、在属性上面加入@Autowired
            <2>、在属性上面加入@Qualifier(values="bean的id")：表示使用指定名称的bean完成赋值。


----------------------------------------------------------------------------

        引用类型
        @Resource：来自jdk中的注解，spring框架提供了对这个注解的功能支持，可以使用它给引用类型赋值
                    使用也是自动注入原理，支持byName，byType，默认是byName

            位置：<1>、在属性定义的上面，无需set方法，推荐使用。
                  <2>、在set方法的上面

        默认是byName：先使用byName自动注入，如果byName赋值失败，在使用byType

        @Resource只使用byName方式，需要增加一个属性name
            name的值是bean的id（名称）

----------------------------------------------------------------------------

3、aop

    (1)、动态代理
        实现方式：jdk动态代理，使用jdk中的Proxy，Method，InvocationHandler创建代理对象。
                    jdk动态代理要求目标类必须实现接口

        oglib动态代理：第三方的工具类，创建代理对象，原理是继承。通过继承目标类，创建子类。
                    子类就是代理对象。要求目标类不能是final的，方法也不能是final的

    (2)、动态代理的作用：
        <1>、在目标类源代码不改变的情况下，增加功能。
        <2>、减少代码的重复
        <3>、专注业务逻辑代码
        <4>、解耦合，让你的业务功能和日志，事务非业务功能分离。

    (3)、Aop：面向切面编程，基于动态代理的，可以使用jdk，cglib两种代理方式。
        Aop就是动态代理的规范化，把动态代理的实现步骤，方式都定义好了，
        让开发人员用一种统一的方式，使用动态代理。


4、AOP (Aspect Orient Programming) 面向切面编程
        Aspect：切面，给你的目标类添加的功能，就是切面。
                切面的特点：一般都是非业务方法，独立使用的。

        Orient：面向，对着。
        Programming：编程

        oop：面向对象编程

        怎么理解面向切面编程？
            <1>、需要在分析项目功能时，找出切面。
            <2>、合理的安排切面的执行时间（在目标方法前，还是目标方法后）
            <3>、合理的安排切面执行的位置，在哪个类，哪个方法增加增强功能

        术语：
            <1>、Aspect：切面，表示增强的功能，就是一堆代码，完成某个一个功能。非业务功能，
                    常见的切面功能有日志，事务，统计信息，参数检查，权限验证。

            <2>、JoinPoint：连接点，连接业务方法和切面的位置。就某类中的业务方法
            <3>、Pointcut：切入点，指多个连接点方法的集合。多个方法
            <4>、目标对象：给那个类的方法增加功能，这个类就是目标对象
            <5>、Advice：通知。通知表示切面功能执行的时间。

        说一个切面有三个关键的要素：
            <1>、切面的功能代码，切面干什么
            <2>、切面的执行位置，使用Pointcut表示切面执行的位置
            <3>、切面的执行时间，使用Advice表示时间，在目标方法之前，还是目标方法之后。

5、aop的实现
    aop是一个规范，是动态的一个规范化，一个标准
    aop的技术实现框架：
     (1)、spring：spring在内部实现了aop规范，能做aop的工作。
                  spring主要在事务处理时使用aop。
                  我们项目开发中很少使用spring的aop实现。因为spring的aop比较笨重。

     (2)、aspectJ:一个开源的专门做aop的框架。spring框架中集成了aspect框架，通过spring就能使用aspect的功能。
        aspectJ框架实现aop有两种方式：
            <1>、使用xml的配置文件：配置全局事务
            <2>、使用注解，我们在项目中要做的aop功能，一般都是使用注解，aspectj有5个注解。


6、学习aspectj框架的使用。
    (1)、切面的执行时间，这个执行时间在规范中叫做Advice（通知，增强）
        在aspectj框架中使用注解表示的。也可以使用xml配置文件中的标签
        <1>、@Before
        <2>、@AfterReturning
        <3>、@Around
        <4>、@AfterThrowing
        <5>、@After



-------------------------------------------------------------------------------------------------------


二、把mybatis框架和spring集成在一起，向一个框架一样使用

用的技术是：ioc
为什么ioc：能把mybatis和spring集成在一起，像一个框架，是因为ioc能创建对象。
    可以把mybatis框架中的对象交给spring统一创建，开发人员从spring中获取对象。
    开发人员就不用同时面对两个或者多个框架了，就面对一个spring

mybatis使用步骤，对象
    <1>、定义dao接口，StudentDao
    <2>、定义mapper文件 StudentDao.xml
    <3>、定义mybatis的主配置文件 mybatis.xml
    <4>、创建dao的代理对象，StudentDao dao = SQLSession.getMapper(StudentDao.class);

        List<Student> student = dao.selectStudents();

要使用dao对象，需要使用getMapper()方法，
怎么能使用getMapper()方法，需要哪些条件
    <1>、获取SQLSession对象，需要使用SQLSessionFactory的openSession()方法。
    <2>、SQLSessionFactory对象。通过读取mybatis的主配置文件，能创建SQLSessionFactory对象

需要SQLSessionFactory对象，使用Factory能获取SQLSession，有了SQLSession就能有dao，目的就是获取dao对象
Factory创建需要读取主配置文件

我们会使用独立的连接池类替换mybatis默认自己带的，把连接池类也交给spring创建。

主配置文件
    <1>、数据库信息
    <2>、mapper文件的位置

-----------------------------------------------------------------------------
通过以上的说明，我们需要让spring创建以下对象
    <1>、独立的连接池类对象，使用阿里的druid连接池
    <2>、SQLSessionFactory对象
    <3>、创建出dao对象

    需要学习就是上面三个对象的创建语法，使用xml的bean标签。

-----------------------------------------------------------------------------

spring的事务处理

回答问题

1、什么是事务
    讲mysql的时候，提出了事务。事务是指一组SQL语句的集合，集合中有多条sql语句
    可能是insert，update，select，delete，我们希望这些多个sql语句都能成功，
    或者都失败，这些sql语句的执行是一致的，作为一个整体执行。

2、在什么时候想到使用事务
    当操作涉及多个表，或者是多个sql语句的insert，update，delete。需要保证
    这些语句都是成功才能完成功能，或者都失败，保证操作是符合要求的。

    在java代码中写程序，控制事务，此时事务应该放在那里呢？
        service类的业务方法上，因为业务方法会调用多个dao方法，执行多个sql语句


3、通常使用JDBC访问数据库，还是mybatis访问数据库怎么处理事务
    jdbc访问数据库，处理事务 Connection conn; conn.commit();  conn.rollback();
    mybatis访问数据库，处理事务，SQLSession.commit();  SqlSession.rollback();
    hibernate访问数据库，处理事务，Session.commit(); Session.rollback();

4、3问题中事务的处理方式，有什么不足
    <1>、不同的数据库访问技术，处理事务的对象，方法不同，
            需要了解不同数据库访问技术使用事务的原理
    <2>、掌握多种数据库中事务的处理逻辑。什么时候提交事务，什么时候回滚事务。
    <3>、处理事务的多种方法。

    总结：就是多种数据库的访问技术，有不同的事务处理的机制，对象，方法。

5、怎么解决不足
    spring提供一种处理事务的统一模型，能使用统一步骤，方式完成多种不同数据库访问数据库技术的事务处理。

    使用spring的事务处理机制，可以完成mybatis访问数据库的事务处理
    使用spring的事务处理机制，可以完成hibernate访问数据库的事务处理。


6、处理事务，需要怎么做，做什么
    spring处理事务的模型，使用的步骤都是固定的，把事务使用的信息提供给spring就可以了

    (1)、事务内部提交，回滚事务，使用的事情管理器对象，代替你完成commit，rollback
        事务管理器是一个接口和他的众多实现类。
        接口：PlatformTransactionManager，定义了事务重要方法commit，rollback
        实现类：spring把每一个数据库访问技术对应的事务处理类都创建好了。
            mybatis访问数据库---spring创建好的是DataSourceTransactionManager
            hibernate访问数据库----spring创建的是HibernateTransactionManager

        怎么使用：你需要告诉spring你用的那种数据库的访问技术，怎么告诉spring呢？
        声明数据库访问技术对于的事务管理实现类，在spring的配置文件中使用<bean>声明就可以了
        <bean id ="xxx" class="...DataSourceTransactionManager">

    (2)、你的业务方法需要什么样的事务，说明需要事务的类型。
        说明方法需要的事务：
            <1>、事务的隔离级别：有4个值。
                DEFAULT：采用DB默认的事务隔离级别。MySQL的默认为REPEATABLE_READ 。Oracle默认为READ_COMMITTED。
                READ_UNCOMMITTED：读未提交。未解决任何并发问题。
                READ_COMMITTED：读已提交。解决脏读，存在不可重复读与幻读。
                REPEATABLE_READ：可重复读。解决脏读，不可重复读，存在幻读。
                SERIALIZABLE：串行化。不存在并发问题。

            <2>、事务的超时时间：表示一个方法最长的执行时间，如果方法执行时超过了时间，事务就回滚。
                单位是秒，整数值，默认是 -1。

            <3>、事务的传播行为：控制业务方法是不是有事务的，是什么样的事务的。
                7个传播行为，表示你的业务方法调用时，事务在方法之间是如何使用的。

                PROPAGATION_REQUIRED
                PROPAGATION_REQUIRES_NEW
                PROPAGATION_SUPPORTS
                以上三个需要掌握的

                PROPAGATION_MANDATORY
                PROPAGATION_NESTED
                PROPAGATION_NEVER
                PROPAGATION_NOT_SUPPORTED


    (3)、事务提交事务，回滚事务的时机
        <1>、当你的业务方法，执行成功，没有异常抛出，当方法执行完毕，spring在方法执行后提交事务commit。

        <2>、当你的业务方法抛出运行时异常，spring执行回滚，调用事务管理器的rollback
            运行时异常的定义：RuntimeException 和他的子类都是运行时异常，例如NullPointException，NumberFormatException

        <3>、当你的业务方法抛出非运行时异常，主要是受查异常时，提交事务
            受查异常：在你写代码中，必须处理的异常。例如IOException，SQLException


总结spring的事务
    (1)、管理事务的是 事务管理和他的实现类
    (2)、spring的事务是一个统一模型
        <1>、指定要使用的事务管理器实现类，使用<bean>
        <2>、指定哪些类，哪些方法需要加入事务的功能
        <3>、指定方法需要的隔离级别，传播行为，超时

        你需要告诉spring，你的项目类信息，方法的名称，方法的事务传播行为。

-----------------------------------------------------------------------------

spring框架中提供的事务处理方案
1、适合中小项目使用的，注解方案。
    spring框架自己用aop实现给业务方法增加事务的功能，使用@Transactional注解增加事务。
    @Transactional注解是spring框架自己注解，放在public方法上面，表示当前方法具有事务。
    可以给注解的属性赋值，表示具体的隔离级别，传播行为，异常信息等等。

    使用@Transactional的步骤：
    <1>、需要声明事务管理器对象
        <bean id="xx" class="DataSourceTransactionManager">

    <2>、开启事务注解驱动，告诉spring框架，我要使用注解的方式管理事务。
        spring使用aop机制，创建@Transactional所在的类代理对象，给方法加入事务的功能。
        spring给业务方法加入事务：
            在你的业务方法执行之前，先开启事务，在业务方法之后提交或回滚事务，使用aop的环绕通知

            @Around("你要增加的事务功能的业务方法名称")
            Object myAround(){
                开启事务，spring给你开启
                try{
                    buy(1001,10);
                    spring的事务管理.commit();
                }catch(Exception e){
                    spring的事务管理.rollback();
                }
            }

    <3>、在你的方法的上面加入@Transactional








































